// <auto-generated />
using System;
using EnergyTracker.WebApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EnergyTracker.WebApi.Migrations
{
    [DbContext(typeof(EnergyTrackerContext))]
    [Migration("20241231162805_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EnergyTracker.WebApi.Data.Apartment", b =>
                {
                    b.Property<int>("ApartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApartmentId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ApartmentId");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Apartment_Name");

                    b.ToTable("Apartments");
                });

            modelBuilder.Entity("EnergyTracker.WebApi.Data.Device", b =>
                {
                    b.Property<int>("DeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeviceId"));

                    b.Property<int>("ApartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<string>("Specifications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DeviceId");

                    b.HasIndex("ApartmentId")
                        .HasDatabaseName("IX_Device_ApartmentId");

                    b.HasIndex("RoomId")
                        .HasDatabaseName("IX_Device_RoomId");

                    b.HasIndex("RoomId", "Name")
                        .IsUnique();

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("EnergyTracker.WebApi.Data.EnergyReading", b =>
                {
                    b.Property<int>("EnergyReadingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnergyReadingId"));

                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.Property<decimal?>("EnergyUsageInkWh")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<decimal?>("PowerInW")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<string>("RawData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("EnergyReadingId");

                    b.HasIndex("DeviceId", "Timestamp")
                        .HasDatabaseName("IX_EnergyReading_DeviceId_Timestamp");

                    b.ToTable("EnergyReadings", t =>
                        {
                            t.HasCheckConstraint("CK_EnergyReading_NonNegative", "[EnergyUsageInkWh] >= 0");

                            t.HasCheckConstraint("CK_EnergyReading_NonNegativePower", "[PowerInW] >= 0");
                        });
                });

            modelBuilder.Entity("EnergyTracker.WebApi.Data.Meter", b =>
                {
                    b.Property<int>("MeterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MeterId"));

                    b.Property<int>("ApartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("MeterId");

                    b.HasIndex("ApartmentId")
                        .HasDatabaseName("IX_Meter_ApartmentId");

                    b.HasIndex("ApartmentId", "Name")
                        .IsUnique();

                    b.ToTable("Meters");
                });

            modelBuilder.Entity("EnergyTracker.WebApi.Data.MeterReading", b =>
                {
                    b.Property<int>("MeterReadingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MeterReadingId"));

                    b.Property<int>("MeterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ValueInKWh")
                        .HasColumnType("decimal(18, 3)");

                    b.HasKey("MeterReadingId");

                    b.HasIndex("MeterId", "Timestamp")
                        .HasDatabaseName("IX_MeterReading_MeterId_Timestamp");

                    b.ToTable("MeterReadings");
                });

            modelBuilder.Entity("EnergyTracker.WebApi.Data.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomId"));

                    b.Property<int>("ApartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RoomId");

                    b.HasIndex("ApartmentId")
                        .HasDatabaseName("IX_Room_ApartmentId");

                    b.HasIndex("ApartmentId", "Name")
                        .IsUnique();

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("EnergyTracker.WebApi.Data.Device", b =>
                {
                    b.HasOne("EnergyTracker.WebApi.Data.Apartment", "Apartment")
                        .WithMany("Devices")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnergyTracker.WebApi.Data.Room", "Room")
                        .WithMany("Devices")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apartment");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("EnergyTracker.WebApi.Data.EnergyReading", b =>
                {
                    b.HasOne("EnergyTracker.WebApi.Data.Device", "Device")
                        .WithMany("EnergyReadings")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("EnergyTracker.WebApi.Data.Meter", b =>
                {
                    b.HasOne("EnergyTracker.WebApi.Data.Apartment", "Apartment")
                        .WithMany("Meters")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apartment");
                });

            modelBuilder.Entity("EnergyTracker.WebApi.Data.MeterReading", b =>
                {
                    b.HasOne("EnergyTracker.WebApi.Data.Meter", "Meter")
                        .WithMany("MeterReadings")
                        .HasForeignKey("MeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meter");
                });

            modelBuilder.Entity("EnergyTracker.WebApi.Data.Room", b =>
                {
                    b.HasOne("EnergyTracker.WebApi.Data.Apartment", "Apartment")
                        .WithMany("Rooms")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apartment");
                });

            modelBuilder.Entity("EnergyTracker.WebApi.Data.Apartment", b =>
                {
                    b.Navigation("Devices");

                    b.Navigation("Meters");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("EnergyTracker.WebApi.Data.Device", b =>
                {
                    b.Navigation("EnergyReadings");
                });

            modelBuilder.Entity("EnergyTracker.WebApi.Data.Meter", b =>
                {
                    b.Navigation("MeterReadings");
                });

            modelBuilder.Entity("EnergyTracker.WebApi.Data.Room", b =>
                {
                    b.Navigation("Devices");
                });
#pragma warning restore 612, 618
        }
    }
}
